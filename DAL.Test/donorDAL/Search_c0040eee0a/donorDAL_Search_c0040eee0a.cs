// Test generated by RoostGPT for test CSharp-Blood-Bank-Management-System using AI Type Open AI and AI Model gpt-4

using System;
using System.Data;
using NUnit.Framework;
using Moq;
using System.Data.Common;

namespace BloodBankManagementSystem.DAL.Test
{
    public class DonorDAL
    {
        private IDbConnection _connection;
        private IDbCommand _command;
        private IDbDataAdapter _dataAdapter;

        public DonorDAL(IDbConnection connection, IDbCommand command, IDbDataAdapter dataAdapter)
        {
            _connection = connection;
            _command = command;
            _dataAdapter = dataAdapter;
        }

        public DataTable Search(string keywords)
        {
            throw new NotImplementedException();
        }
    }

    [TestFixture]
    public class DonorDAL_Search_c0040eee0a
    {
        private Mock<IDbConnection> _mockConnection;
        private Mock<IDbCommand> _mockCommand;
        private Mock<IDbDataAdapter> _mockDataAdapter;
        private DonorDAL _donorDAL;

        [SetUp]
        public void Setup()
        {
            _mockConnection = new Mock<IDbConnection>();
            _mockCommand = new Mock<IDbCommand>();
            _mockDataAdapter = new Mock<IDbDataAdapter>();

            _donorDAL = new DonorDAL(_mockConnection.Object, _mockCommand.Object, _mockDataAdapter.Object);
        }

        [Test]
        public void Search_WhenCalledWithValidKeywords_ReturnsDataTable()
        {
            var keywords = "test";
            var expectedDataTable = new DataTable();

            _mockCommand.Setup(m => m.CommandText).Returns("SELECT * FROM tbl_donors WHERE donor_id LIKE '%"+ keywords +"%' OR first_name LIKE '%"+keywords+"%' OR last_name LIKE '"+keywords+"' OR email LIKE '%"+ keywords +"%' OR blood_group LIKE '"+keywords+"'");
            _mockDataAdapter.Setup(m => m.Fill(It.IsAny<DataSet>())).Returns(expectedDataTable.Rows.Count);

            var result = _donorDAL.Search(keywords);

            Assert.That(result, Is.EqualTo(expectedDataTable));
        }

        [Test]
        public void Search_WhenCalledWithInvalidKeywords_ThrowsException()
        {
            var keywords = "invalid";

            _mockCommand.Setup(m => m.CommandText).Returns("SELECT * FROM tbl_donors WHERE donor_id LIKE '%"+ keywords +"%' OR first_name LIKE '%"+keywords+"%' OR last_name LIKE '"+keywords+"' OR email LIKE '%"+ keywords +"%' OR blood_group LIKE '"+keywords+"'");
            _mockDataAdapter.Setup(m => m.Fill(It.IsAny<DataSet>())).Throws<DbException>();

            Assert.Throws<DbException>(() => _donorDAL.Search(keywords));
        }

        [TearDown]
        public void TearDown()
        {
            _mockConnection = null;
            _mockCommand = null;
            _mockDataAdapter = null;
            _donorDAL = null;
        }
    }
}
