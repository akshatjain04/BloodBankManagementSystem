// Test generated by RoostGPT for test CSharp-Blood-Bank-Management-System using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using System.Data;
using System;
// Check the namespace of DonorDAL and DonorBLL. It should be correct.
// If the namespace is correct, then make sure the assembly that contains these classes is referenced in your project.
using BloodBankManagementSystem.DAL;
using BloodBankManagementSystem.BLL;

namespace BloodBankManagementSystem.DAL.Test
{
    [TestFixture]
    public class donorDAL_Insert_30b7fc5657
    {
        private Mock<IDbConnection> _mockConnection;
        private Mock<IDbCommand> _mockCommand;
        // Check the class name of DonorDAL. It should be correct.
        private DonorDAL _donorDAL;
        // Check the class name of DonorBLL. It should be correct.
        private DonorBLL _donorBLL;

        [SetUp]
        public void Setup()
        {
            _mockConnection = new Mock<IDbConnection>();
            _mockCommand = new Mock<IDbCommand>();
            _donorDAL = new DonorDAL(_mockConnection.Object);
            _donorBLL = new DonorBLL
            {
                FirstName = "John",
                LastName = "Doe",
                Email = "johndoe@example.com",
                Contact = "1234567890",
                Gender = "Male",
                Address = "123 Street",
                BloodGroup = "A+",
                AddedDate = DateTime.Now,
                ImageName = "john_doe.jpg",
                AddedBy = 1
            };
        }

        [Test]
        public void Insert_ValidDonor_ReturnsTrue()
        {
            _mockConnection.Setup(m => m.CreateCommand()).Returns(_mockCommand.Object);
            _mockCommand.Setup(m => m.ExecuteNonQuery()).Returns(1);

            var result = _donorDAL.Insert(_donorBLL);

            Assert.IsTrue(result);
        }

        [Test]
        public void Insert_InvalidDonor_ReturnsFalse()
        {
            _mockConnection.Setup(m => m.CreateCommand()).Returns(_mockCommand.Object);
            _mockCommand.Setup(m => m.ExecuteNonQuery()).Returns(0);

            var result = _donorDAL.Insert(_donorBLL);

            Assert.IsFalse(result);
        }
    }
}
