// Test generated by RoostGPT for test CSharp-Blood-Bank-Management-System using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Data.SqlClient;
using BloodBankManagementSystem.DAL;
using Moq;

namespace BloodBankManagementSystem.DAL.Test
{
    [TestFixture]
    public class donorDAL_Update_4a2e8dc922
    {
        private readonly Mock<SqlConnection> _mockSqlConnection;
        private readonly Mock<SqlCommand> _mockSqlCommand;

        public donorDAL_Update_4a2e8dc922()
        {
            _mockSqlConnection = new Mock<SqlConnection>();
            _mockSqlCommand = new Mock<SqlCommand>();
        }

        [Test]
        public void Update_Donor_Success()
        {
            // Arrange
            var donor = new DonorBLL
            {
                first_name = "John",
                last_name = "Doe",
                email = "john.doe@example.com",
                contact = "123456789",
                gender = "Male",
                address = "123 Main St",
                blood_group = "O+",
                image_name = "john_doe.jpg",
                added_by = 1,
                donor_id = 1
            };

            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(1);
            var donorDAL = new DonorDAL(_mockSqlConnection.Object, _mockSqlCommand.Object);

            // Act
            var result = donorDAL.Update(donor);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        public void Update_Donor_Failure()
        {
            // Arrange
            var donor = new DonorBLL
            {
                first_name = "John",
                last_name = "Doe",
                email = "john.doe@example.com",
                contact = "123456789",
                gender = "Male",
                address = "123 Main St",
                blood_group = "O+",
                image_name = "john_doe.jpg",
                added_by = 1,
                donor_id = 1
            };

            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(0);
            var donorDAL = new DonorDAL(_mockSqlConnection.Object, _mockSqlCommand.Object);

            // Act
            var result = donorDAL.Update(donor);

            // Assert
            Assert.IsFalse(result);
        }
    }
}
