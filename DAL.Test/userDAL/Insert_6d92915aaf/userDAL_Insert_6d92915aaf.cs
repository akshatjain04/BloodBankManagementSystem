// Test generated by RoostGPT for test CSharp-Blood-Bank-Management-System using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Data;
using Moq;
using BloodBankManagementSystem.DAL;

namespace BloodBankManagementSystem.DAL.Test
{
    [TestFixture]
    public class UserDAL_Insert_6d92915aaf
    {
        private Mock<IDbConnection> _mockSqlConnection;
        private Mock<IDbCommand> _mockSqlCommand;
        private UserDAL _userDAL;

        [SetUp]
        public void SetUp()
        {
            _mockSqlConnection = new Mock<IDbConnection>();
            _mockSqlCommand = new Mock<IDbCommand>();
            _userDAL = new UserDAL(_mockSqlConnection.Object, _mockSqlCommand.Object);
        }

        [Test]
        public void Insert_WhenCalledWithValidUser_ReturnsTrue()
        {
            // Arrange
            var user = new UserBLL
            {
                Username = "test_username",
                Email = "test_email",
                Password = "test_password",
                FullName = "test_full_name",
                Contact = "test_contact",
                Address = "test_address",
                AddedDate = DateTime.Now,
                ImageName = "test_image_name"
            };

            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(1);

            // Act
            var result = _userDAL.Insert(user);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        public void Insert_WhenCalledWithInvalidUser_ReturnsFalse()
        {
            // Arrange
            var user = new UserBLL();

            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(0);

            // Act
            var result = _userDAL.Insert(user);

            // Assert
            Assert.IsFalse(result);
        }

        [TearDown]
        public void TearDown()
        {
            _mockSqlConnection = null;
            _mockSqlCommand = null;
            _userDAL = null;
        }
    }
}
