// Test generated by RoostGPT for test CSharp-Blood-Bank-Management-System using AI Type Open AI and AI Model gpt-4

using System;
using System.Data;
using NUnit.Framework;
using Moq;
using BloodBankManagementSystem.DAL.Test;
using BloodBankManagementSystem.BLL; // Add this line to reference the BLL namespace

namespace BloodBankManagementSystem.DAL.Test
{
    [TestFixture]
    public class userDAL_Delete_948a360766
    {
        private Mock<IDbConnection> _mockSqlConnection;
        private Mock<IDbCommand> _mockSqlCommand;
        private UserBLL _userBLL; // Change the class name to start with a capital letter

        [SetUp]
        public void Setup()
        {
            _mockSqlConnection = new Mock<IDbConnection>();
            _mockSqlCommand = new Mock<IDbCommand>();
            _userBLL = new UserBLL(_mockSqlConnection.Object, _mockSqlCommand.Object); // Change the class name to start with a capital letter
        }

        [Test]
        public void Delete_WhenCalled_ReturnsTrue()
        {
            // Arrange
            var user = new User { user_id = 1 };
            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(1);

            // Act
            var result = _userBLL.Delete(user);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        public void Delete_WhenCalled_ReturnsFalse()
        {
            // Arrange
            var user = new User { user_id = 1 };
            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Returns(0);

            // Act
            var result = _userBLL.Delete(user);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        public void Delete_WhenExceptionThrown_ReturnsFalse()
        {
            // Arrange
            var user = new User { user_id = 1 };
            _mockSqlCommand.Setup(m => m.ExecuteNonQuery()).Throws<Exception>();

            // Act
            var result = _userBLL.Delete(user);

            // Assert
            Assert.IsFalse(result);
        }
    }
}
